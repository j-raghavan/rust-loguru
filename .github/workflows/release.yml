name: Release

on:
  push:
    tags:
      - "v[0-9]+.*"

permissions:
  contents: write  

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  verify:
    name: Verify Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Build
        run: cargo build --release

      - name: Test
        run: cargo test --release

  create-release:
    name: Create Release
    needs: verify
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          generate_release_notes: true

  build-release:
    name: Build Release (${{ matrix.target }})
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rust-loguru.exe
            asset_name: rust-loguru-x86_64-windows.exe

          # Windows ARM64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: rust-loguru.exe
            asset_name: rust-loguru-aarch64-windows.exe

          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rust-loguru
            asset_name: rust-loguru-x86_64-linux

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rust-loguru
            asset_name: rust-loguru-aarch64-linux

          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rust-loguru
            asset_name: rust-loguru-x86_64-darwin

          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rust-loguru
            asset_name: rust-loguru-aarch64-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: runner.os == 'Linux' && contains(matrix.target, 'aarch64')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build target
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p dist
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "dist/${{ matrix.asset_name }}"
          else
            cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "dist/${{ matrix.asset_name }}"
            chmod +x "dist/${{ matrix.asset_name }}"
          fi

      - name: Generate checksum
        shell: bash
        run: |
          cd dist
          if [ "${{ runner.os }}" = "Windows" ]; then
            certutil -hashfile ${{ matrix.asset_name }} SHA256 > ${{ matrix.asset_name }}.sha256
          else
            shasum -a 256 ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256
          fi

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            dist/${{ matrix.asset_name }}
            dist/${{ matrix.asset_name }}.sha256
